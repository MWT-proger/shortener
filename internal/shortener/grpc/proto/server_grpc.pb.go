// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shortener_GenerateShortKey_FullMethodName     = "/server.Shortener/GenerateShortKey"
	Shortener_GetFullURLByShortKey_FullMethodName = "/server.Shortener/GetFullURLByShortKey"
	Shortener_GetListUserURLs_FullMethodName      = "/server.Shortener/GetListUserURLs"
	Shortener_DeleteListUserURLs_FullMethodName   = "/server.Shortener/DeleteListUserURLs"
)

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	GenerateShortKey(ctx context.Context, in *GenerateShortKeyRequest, opts ...grpc.CallOption) (*GenerateShortKeyResponse, error)
	GetFullURLByShortKey(ctx context.Context, in *GetFullURLByShortKeyRequest, opts ...grpc.CallOption) (*GetFullURLByShortKeyResponse, error)
	GetListUserURLs(ctx context.Context, in *GetListUserURLsRequest, opts ...grpc.CallOption) (*GetListUserURLsResponse, error)
	DeleteListUserURLs(ctx context.Context, in *DeleteListUserURLsRequest, opts ...grpc.CallOption) (*DeleteListUserURLsResponse, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) GenerateShortKey(ctx context.Context, in *GenerateShortKeyRequest, opts ...grpc.CallOption) (*GenerateShortKeyResponse, error) {
	out := new(GenerateShortKeyResponse)
	err := c.cc.Invoke(ctx, Shortener_GenerateShortKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetFullURLByShortKey(ctx context.Context, in *GetFullURLByShortKeyRequest, opts ...grpc.CallOption) (*GetFullURLByShortKeyResponse, error) {
	out := new(GetFullURLByShortKeyResponse)
	err := c.cc.Invoke(ctx, Shortener_GetFullURLByShortKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetListUserURLs(ctx context.Context, in *GetListUserURLsRequest, opts ...grpc.CallOption) (*GetListUserURLsResponse, error) {
	out := new(GetListUserURLsResponse)
	err := c.cc.Invoke(ctx, Shortener_GetListUserURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) DeleteListUserURLs(ctx context.Context, in *DeleteListUserURLsRequest, opts ...grpc.CallOption) (*DeleteListUserURLsResponse, error) {
	out := new(DeleteListUserURLsResponse)
	err := c.cc.Invoke(ctx, Shortener_DeleteListUserURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	GenerateShortKey(context.Context, *GenerateShortKeyRequest) (*GenerateShortKeyResponse, error)
	GetFullURLByShortKey(context.Context, *GetFullURLByShortKeyRequest) (*GetFullURLByShortKeyResponse, error)
	GetListUserURLs(context.Context, *GetListUserURLsRequest) (*GetListUserURLsResponse, error)
	DeleteListUserURLs(context.Context, *DeleteListUserURLsRequest) (*DeleteListUserURLsResponse, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) GenerateShortKey(context.Context, *GenerateShortKeyRequest) (*GenerateShortKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateShortKey not implemented")
}
func (UnimplementedShortenerServer) GetFullURLByShortKey(context.Context, *GetFullURLByShortKeyRequest) (*GetFullURLByShortKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullURLByShortKey not implemented")
}
func (UnimplementedShortenerServer) GetListUserURLs(context.Context, *GetListUserURLsRequest) (*GetListUserURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUserURLs not implemented")
}
func (UnimplementedShortenerServer) DeleteListUserURLs(context.Context, *DeleteListUserURLsRequest) (*DeleteListUserURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteListUserURLs not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_GenerateShortKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateShortKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GenerateShortKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GenerateShortKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GenerateShortKey(ctx, req.(*GenerateShortKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetFullURLByShortKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullURLByShortKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetFullURLByShortKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetFullURLByShortKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetFullURLByShortKey(ctx, req.(*GetFullURLByShortKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetListUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListUserURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetListUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetListUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetListUserURLs(ctx, req.(*GetListUserURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_DeleteListUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteListUserURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).DeleteListUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_DeleteListUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).DeleteListUserURLs(ctx, req.(*DeleteListUserURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateShortKey",
			Handler:    _Shortener_GenerateShortKey_Handler,
		},
		{
			MethodName: "GetFullURLByShortKey",
			Handler:    _Shortener_GetFullURLByShortKey_Handler,
		},
		{
			MethodName: "GetListUserURLs",
			Handler:    _Shortener_GetListUserURLs_Handler,
		},
		{
			MethodName: "DeleteListUserURLs",
			Handler:    _Shortener_DeleteListUserURLs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server.proto",
}
