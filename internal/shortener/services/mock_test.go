// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MWT-proger/shortener/internal/shortener/services (interfaces: Storager)
//
// Generated by this command:
//
//	mockgen -destination mock_test.go -package services github.com/MWT-proger/shortener/internal/shortener/services Storager
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	models "github.com/MWT-proger/shortener/internal/shortener/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// CountUsersAndUrls mocks base method.
func (m *MockStorager) CountUsersAndUrls(arg0 context.Context) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsersAndUrls", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountUsersAndUrls indicates an expected call of CountUsersAndUrls.
func (mr *MockStoragerMockRecorder) CountUsersAndUrls(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsersAndUrls", reflect.TypeOf((*MockStorager)(nil).CountUsersAndUrls), arg0)
}

// DeleteList mocks base method.
func (m *MockStorager) DeleteList(arg0 context.Context, arg1 ...models.DeletedShortURL) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteList", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockStoragerMockRecorder) DeleteList(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockStorager)(nil).DeleteList), varargs...)
}

// Get mocks base method.
func (m *MockStorager) Get(arg0 context.Context, arg1 string) (models.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(models.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoragerMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorager)(nil).Get), arg0, arg1)
}

// GetList mocks base method.
func (m *MockStorager) GetList(arg0 context.Context, arg1 uuid.UUID) ([]*models.JSONShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", arg0, arg1)
	ret0, _ := ret[0].([]*models.JSONShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockStoragerMockRecorder) GetList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockStorager)(nil).GetList), arg0, arg1)
}

// Ping mocks base method.
func (m *MockStorager) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoragerMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorager)(nil).Ping))
}

// Set mocks base method.
func (m *MockStorager) Set(arg0 context.Context, arg1 models.ShortURL) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockStoragerMockRecorder) Set(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorager)(nil).Set), arg0, arg1)
}

// SetMany mocks base method.
func (m *MockStorager) SetMany(arg0 context.Context, arg1 []models.JSONShortURL, arg2 string, arg3 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMany", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMany indicates an expected call of SetMany.
func (mr *MockStoragerMockRecorder) SetMany(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMany", reflect.TypeOf((*MockStorager)(nil).SetMany), arg0, arg1, arg2, arg3)
}
